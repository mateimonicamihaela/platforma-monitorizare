---
- name: "Desfășoară aplicația «platforma-monitorizare» folosind Docker Compose"
  hosts: monitoring_vm
  become: true
  gather_facts: true

  vars:
    # Căi pe mașina țintă
    app_dir: /opt/platforma-monitorizare
    compose_dir: /opt/platforma-monitorizare/docker
    data_dir: /opt/platforma-monitorizare/data
    repo_url: "https://github.com/mateimonicamihaela/platforma-monitorizare.git"

    # Variabile de mediu pentru containere (scrise în .env)
    INTERVAL: "5"
    OUT_FILE: "/data/system-state.log"
    BACKUP_INTERVAL: "5"
    SRC_FILE: "/data/system-state.log"
    BACKUP_DIR: "/data/backup"
    MAX_BACKUPS: "10"

  pre_tasks:
    - name: "Instalează Git pentru clonarea repository-ului"
      apt:
        name: git
        state: present
        update_cache: true

    - name: "Creează directoarele pentru aplicație și date"
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ app_dir }}"
        - "{{ data_dir }}"
        - "{{ data_dir }}/backup"

  tasks:
    - name: "Verifică dacă {{ app_dir }} este repo Git"
      stat:
        path: "{{ app_dir }}/.git"
      register: gitdir

    - name: "Șterge {{ app_dir }} dacă nu este repo Git (clonare curată)"
      file:
        path: "{{ app_dir }}"
        state: absent
      when: not gitdir.stat.exists

    - name: "Recreează directorul aplicației (dacă a fost șters)"
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: "0755"

    - name: "Clonează sau actualizează repository-ul proiectului"
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        version: main
        update: yes
        force: yes

    - name: "Generează fișierul .env pentru docker compose"
      copy:
        dest: "{{ compose_dir }}/.env"
        mode: "0644"
        content: |
          # Variabile pentru platforma-monitorizare (generate de Ansible)
          INTERVAL={{ INTERVAL }}
          OUT_FILE={{ OUT_FILE }}
          BACKUP_INTERVAL={{ BACKUP_INTERVAL }}
          SRC_FILE={{ SRC_FILE }}
          BACKUP_DIR={{ BACKUP_DIR }}
          MAX_BACKUPS={{ MAX_BACKUPS }}

    - name: "Validează configurația Docker Compose (CLI v2)"
      shell: |
        set -e
        cd {{ compose_dir }}
        docker compose config
      args:
        executable: /bin/bash
        
    - name: "Oprește și curăță proiectul Compose (down + remove orphans)"
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        state: absent
        remove_orphans: true

    - name: "Pornește aplicația cu Docker Compose (pull + up)"
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        state: present          # up -d
        pull: always            # trage imaginile
        recreate: always        # forțează recrearea containerelor (restart efectiv)
        remove_orphans: true    # elimină containerele orfane
        wait: true              # așteaptă ca serviciile să fie 'healthy'/pornite
        wait_timeout: 120

    # --- Verificări aplicație ---
    - name: "Așteaptă ca fișierul de loguri să fie creat"
      ansible.builtin.wait_for:
        path: "{{ data_dir }}/system-state.log"
        state: present
        timeout: 60

    - name: "Pauză scurtă pentru a permite rularea backup-ului"
      pause:
        seconds: 10

    - name: "Caută fișiere de backup în {{ data_dir }}/backup"
      find:
        paths: "{{ data_dir }}/backup"
        patterns: "system-state-*.log"
        file_type: file
      register: found_backups

    - name: "Afișează fișierele de backup găsite"
      debug:
        msg: "{{ found_backups.files | map(attribute='path') | list }}"

    - name: "Eroare dacă nu s-a creat niciun fișier de backup"
      fail:
        msg: "Nu s-a creat niciun fișier de backup în {{ data_dir }}/backup! Verifică logurile containerului «backup»."
      when: (found_backups.matched | default(0)) | int == 0

    - name: "Afișează lista containerelor active (rezumat)"
      shell: |
        {% raw %}docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'{% endraw %}
      args:
        executable: /bin/bash
      register: docker_ps
      changed_when: false

    - name: "Afișează rezultatul comenzii docker ps"
      debug:
        var: docker_ps.stdout_lines
